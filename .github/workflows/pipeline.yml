# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: 
      - "master" 

env:
  REGISTRY: ghcr.io/owenchenxy
  IMAGE_NAME: example-hello-world
  TASK_DEFINITION: CdkStackTaskDefinition
  SERVICE_NAME: MyFargateService
  CLUSTER_NAME: MyCluster

jobs:
  mvn_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - run: |
          sed -i "s|{{imageUri}}|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}|g" src/main/java/example/smallest/controllers/WelcomeController.java
      - name: Build with Maven
        run: mvn -B package --file pom.xml -Dmaven.compiler.source=1.8 -Dmaven.compiler.target=1.8
      - run: |
          mkdir -p artifact && \
          cp target/*.war artifact/
          cp application.properties artifact/
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: artifact
  dockerize:
    needs: mvn_build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: artifact
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
  deploy_by_cdk:
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: owenchenxy/infra
          path: infra
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: us-west-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION }} \
            | jq '.taskDefinition | {family, containerDefinitions, taskRoleArn, executionRoleArn, networkMode, requiresCompatibilities, cpu, memory}' \
            > task-definition-template.json
        working-directory: infra
      - name: Render Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/task-definition-template.json
          container-name: web
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          environment-variables: "LOG_LEVEL=info"
      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
  # deploy_by_pulumi:
  #   needs: dockerize
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: owenchenxy/infra
  #         path: infra
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: '1.21'
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-region: us-west-2
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     - run: go mod download
  #       working-directory: infra
  #     - run: |
  #         sed -i "s|{{imageUri}}|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}|g" Pulumi.${{ env.DEFAULT_STACK_NAME }}.yaml
  #       working-directory: infra
  #     - uses: pulumi/actions@v3
  #       with:
  #         command: "up"
  #         stack-name: ${{ env.DEFAULT_STACK_NAME }}
  #         work-dir: infra
  #       env:
  #         PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

